# -*- coding: utf-8 -*-
"""
Created on Sat May 30 22:31:10 2020

@author: Mouiad
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import os
import re
import getLane

# Code to generate lane coordinates from probablity maps.

# Experiment name
exp = "vgg_SCNN_DULR_w9"
# Data root
data = "../data/CULane"
# Directory where prob imgs generated by CNN are saved.
probRoot = "../experiments/predicts/" + exp
# Directory to save fitted lanes.
output = "../prob2lines/output/" + exp

testList = data + "/list/test.txt"  # TODO edited the text file
show = True  # set to true to visualize


with open(testList) as f:
    image_list = f.readlines()


image_list = [x.strip() for x in image_list]
#print(image_list)
num = len(image_list)
pts = 18

for i in range(num):
    if np.mod(i + 1, 100) == 0:
        print(('Processing the %d th image...\\n'), i)
    imname = image_list[i]
    existPath = probRoot + imname[:-3] + "exist.txt"

    with open(existPath) as f:
        exist = f.readlines()
    exist = [y for x in exist for y in x if y == '1' or y == '0']
    # TODO better to show with opencv
    coordinates = np.zeros((4, pts))
    for j in range(4):
        if exist[j] == '1':
            scorePath = probRoot + imname[:-4] + "_" + str(j + 1) + "_avg.png"
            scoreMap = mpimg.imread(scorePath) * 255.0
            coordinate = getLane.getLane(scoreMap)
            coordinates[j, :] = coordinate
        if show:
            img = mpimg.imread(data + imname)
            probMaps = np.uint8(np.zeros((288, 800, 3)))  # TODO this needs to change for the right size
            plt.imshow(img)
            for k in range(4):
                color = ['g', 'b', 'r', 'y']
                if exist[k] == '1':
                    for m in range(pts):  # The devil is in the details m and k and -1
                        if coordinates[k, m] > 0:  # plotting!
                            plt.plot(np.uint16(np.round(coordinates[k, m] * 1640.0 / 800.0)) - 1, np.uint16(np.round(590 - m * 20)) - 1, "." + color[k], "markersize", 30)
                probPath = probRoot + imname[:-4] + "_" + str(k + 1) + "_avg.png"
                probMap = mpimg.imread(probPath) * 255 # The mod
                probMaps[:, :, np.mod(k + 1, 3)] = probMaps[:, :, np.mod(k + 1, 3)] + probMap
            #plt.show()
            #plt.imshow(probMaps)
            plt.show()
        else:
            save_name = output + imname[:- 3] + "lines.txt"
            position = [m.start() for m in re.finditer('/', save_name)]
            prefix = ''
            if position:
                prefix = save_name[:position[-1]]
            if not os.path.exists(prefix) and prefix != ' ':
                os.makedirs(prefix)
            fp = open(save_name, "w")
            for k in range(4):
                if exist[k] == '1' and np.sum(coordinates[k, :] > 0) > 1:
                    for m in range(pts):
                        if coordinates[k, m] > 0:
                            fp.write(str(np.uint16(np.round(coordinates[k, m] * 1640.0 / 800.0)) - 1) + ' ' + str(np.uint16(np.round(590 - m * 20)) - 1) + ' ')
                            #print(np.uint16(np.round(coordinates[k, m] * 1640.0 / 800.0)) - 1, np.uint16(np.round(590 - m * 20)) - 1)
                    fp.write('\n')
            fp.close()
